Feature: Promote applications added using Clone strategy Bitbucket  Scenario Outline: Promote application with deploy-with-autotests pipeline using autotests    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User clones codebase using semver versioning type on bitbucket      | applicationName   | <autotestName>         |      | codeLanguage      | <autotestCodeLanguage> |      | defaultBranchName | <defaultBranchName>    |      | startFromVersion  | 1.2.3                  |      | startFromSnapshot | SNAPSHOT               |    Then User sees success status and correct values in fields for <autotestName> application      | codeLanguage | <autotestCodeLanguage> |    When User clones codebase using semver versioning type on bitbucket      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 1.2.3               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User creates new branch with semver versioning type in <applicationName> application      | newBranchName     | <newBranchName> |      | startFromVersion  | 2.3.4           |      | startFromSnapshot | RC              |      | realiseBranch     | True            |    Then User sees created <newBranchName> branch as release    When User triggers build pipeline for <newBranchName> branch name    Then User checks build pipeline status submitted manually for "<newBranchNameFormatted>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <newBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName           | <applicationName>     |      | branchName                | <newBranchName>       |      | clusterName               | in-cluster            |      | stageName                 | <stageName>           |      | promoteInPipeline         | True                  |      | qualityGatesName          | autotest              |      | qualityGatesProject       | <autotestName>        |      | qualityGatesProjectBranch | <defaultBranchName>   |      | triggerTemplate           | deploy-with-autotests |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy-with-autotests trigger template    And User checks autotests-gradle autotest pipeline status for "<stageName>" stage in "<pipelineName>" pipeline    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION promoted image available in image stream version popup for <applicationName> application    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User deletes application with name <autotestName>    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    @UI @TektonBitbucketUI @TektonBitbucketPromoteUI @TektonBitbucketDeployUIRegression    Examples:      | applicationName  | defaultBranchName | codeLanguage      | newBranchName | pipelineName  | stageName | newBranchNameFormatted | autotestName   | autotestCodeLanguage  |      | beego-ui-promote | master            | beego_application | release/2.3   | beego-dp-prom | dev       | release-2-3            | java8-grd-test | java8_gradle_autotest |  Scenario Outline: Promote application with deploy pipeline    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using semver versioning type on bitbucket      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 1.2.3               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName   | <applicationName>   |      | branchName        | <defaultBranchName> |      | clusterName       | in-cluster          |      | stageName         | <stageName>         |      | promoteInPipeline | True                |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION promoted image available in image stream version popup for <applicationName> application    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    @UI @TektonBitbucketUI @TektonBitbucketPromoteUI @TektonBitbucketDeployUIRegression    Examples:      | applicationName   | defaultBranchName | codeLanguage       | pipelineName   | stageName |      | antora-ui-promote | master            | antora_application | antora-promote | dev       |  Scenario Outline: Promote application with deploy-with-autotests pipeline without autotests    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using semver versioning type on bitbucket      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 1.2.3               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName   | <applicationName>     |      | branchName        | <defaultBranchName>   |      | clusterName       | in-cluster            |      | stageName         | <stageName>           |      | promoteInPipeline | True                  |      | triggerTemplate   | deploy-with-autotests |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy-with-autotests trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION promoted image available in image stream version popup for <applicationName> application    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    @UI @TektonBitbucketUI @TektonBitbucketPromoteUI @TektonBitbucketDeployUIRegression    Examples:      | applicationName | defaultBranchName | codeLanguage           | pipelineName    | stageName |      | dotnet6-promote | master            | dotnet_6_0_application | dotnet6-promote | dev       |