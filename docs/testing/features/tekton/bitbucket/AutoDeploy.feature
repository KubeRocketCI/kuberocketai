Feature: Auto deploy UI  Scenario Outline: Check auto deploy with promote using deploy trigger template UI    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using semver versioning type on bitbucket      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 1.2.3               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User creates new branch with semver versioning type in <applicationName> application      | newBranchName     | <newBranchName> |      | startFromVersion  | 2.3.4           |      | startFromSnapshot | RC              |      | realiseBranch     | True            |    Then User sees created <newBranchName> branch as release    When User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName   | <applicationName> |      | branchName        | <newBranchName>   |      | clusterName       | in-cluster        |      | stageName         | <stageName>       |      | promoteInPipeline | True              |      | triggerType       | Auto              |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens Components tab    And User searches created application by <applicationName> name    And User select created application <applicationName> name    And User triggers build pipeline for <newBranchName> branch name    Then User checks build pipeline status submitted manually for "<newBranchNameFormatted>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <newBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks deployed <applicationName> application in the default namespace for <stageName> stage in <pipelineName> pipeline    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION promoted image available in image stream version popup for <applicationName> application    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    @UI @TektonBitbucketUI @TektonBitbucketAutoDeployUI @TektonBitbucketDeployUIRegression    Examples:      | applicationName | defaultBranchName | codeLanguage               | newBranchName | pipelineName  | stageName | newBranchNameFormatted |      | beego-ui-auto   | master            | beego_application          | release/2.3   | beego-dp-auto | dev       | release-2-3            |      | cpp-ui-auto     | master            | cpp_none_cmake_application | release/2.3   | cpp-dp-auto   | dev       | release-2-3            |  Scenario Outline: Check auto deploy in custom namespace with promote using deploy-with-autotest trigger template UI    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using semver versioning type on bitbucket      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 1.2.3               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User creates new branch with semver versioning type in <applicationName> application      | newBranchName     | <newBranchName> |      | startFromVersion  | 2.3.4           |      | startFromSnapshot | TEST            |    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName     | <applicationName>     |      | branchName          | <newBranchName>       |      | clusterName         | in-cluster            |      | stageName           | <stageName>           |      | promoteInPipeline   | True                  |      | customNamespaceName | <customNamespaceName> |      | triggerType         | Auto                  |      | triggerTemplate     | deploy-with-autotests |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens Components tab    And User searches created application by <applicationName> name    And User select created application <applicationName> name    And User triggers build pipeline for <newBranchName> branch name    Then User checks build pipeline status submitted manually for "<newBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <newBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy-with-autotests trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks deployed <applicationName> application in <customNamespaceName> namespace    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION promoted image available in image stream version popup for <applicationName> application    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks namespace with <customNamespaceName> namespace is deleted    @UI @TektonBitbucketUI @TektonBitbucketAutoDeployUI @TektonBitbucketDeployUIRegression    Examples:      | applicationName    | defaultBranchName | codeLanguage             | newBranchName | pipelineName   | stageName | customNamespaceName          |      | java17-mvn-ui-auto | master            | java17_maven_application | test          | java17-dp-auto | dev       | java17-auto-custom-namespace |  Scenario Outline: Check auto deploy without promote using deploy-with-autotests trigger template UI    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on bitbucket      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName | <applicationName>     |      | branchName      | <defaultBranchName>   |      | clusterName     | in-cluster            |      | stageName       | <stageName>           |      | triggerType     | Auto                  |      | triggerTemplate | deploy-with-autotests |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens Components tab    And User searches created application by <applicationName> name    And User select created application <applicationName> name    And User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy-with-autotests trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks deployed <applicationName> application in the default namespace for <stageName> stage in <pipelineName> pipeline    And User checks that IMAGE_VERSION image isn't promoted for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    @UI @TektonBitbucketUI @TektonBitbucketAutoDeployUI @TektonBitbucketDeployUIRegression    Examples:      | applicationName  | defaultBranchName | codeLanguage           | pipelineName   | stageName |      | dotnet31-ui-auto | master            | dotnet_3_1_application | dotnet31-dp-au | sit       |  Scenario Outline: Check auto-stable deploy with promotion in UI    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User deletes <secondApplicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on bitbucket      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    And User opens Components tab    And User creates codebase using default versioning type on bitbucket      | applicationName   | <secondApplicationName> |      | codeLanguage      | <codeLanguage>          |      | defaultBranchName | <defaultBranchName>     |    When User opens Components tab    And User searches created application by <applicationName> name    And User select created application <applicationName> name    And User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    When User opens Components tab    And User searches created application by <secondApplicationName> name    And User select created application <secondApplicationName> name    Then User sees created <defaultBranchName> branch as default    And User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<secondApplicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <secondApplicationName> codebase    When User saves the image version in memory as IMAGE_VERSION_2 for <secondApplicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName       | <applicationName>       |      | secondApplicationName | <secondApplicationName> |      | branchName            | <defaultBranchName>     |      | clusterName           | in-cluster              |      | stageName             | <stageName>             |      | triggerType           | Auto-stable             |      | triggerTemplate       | deploy                  |      | promoteInPipeline     | True                    |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    When User opens Components tab    And User searches created application by <applicationName> name    And User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks IMAGE_VERSION_2 promoted image for <secondApplicationName> application for <stageName> stage <pipelineName> pipeline    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User deletes application with name <secondApplicationName>    @UI @TektonBitbucketUI @TektonBitbucketAutoDeployUI @TektonBitbucketDeployUIRegression    Examples:      | applicationName  | secondApplicationName | defaultBranchName | codeLanguage      | pipelineName    | stageName |      | autost-beegoui-1 | autost-beegoui-2      | master            | beego_application | autost-beego-ui | sit       |  Scenario Outline: Check auto-stable deploy don't start in UI    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User deletes <secondApplicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on bitbucket      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    And User opens Components tab    And User creates codebase using default versioning type on bitbucket      | applicationName   | <secondApplicationName> |      | codeLanguage      | <codeLanguage>          |      | defaultBranchName | <defaultBranchName>     |    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName       | <applicationName>       |      | secondApplicationName | <secondApplicationName> |      | branchName            | <defaultBranchName>     |      | clusterName           | in-cluster              |      | stageName             | <stageName>             |      | triggerType           | Auto-stable             |      | triggerTemplate       | deploy                  |      | promoteInPipeline     | True                    |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    When User opens Components tab    And User searches created application by <applicationName> name    And User select created application <applicationName> name    And User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    And User opens Deployment Flows tab    And User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User checks pipeline "deploy-<pipelineName>-<stageName>" didn't start    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User deletes application with name <secondApplicationName>    @UI @TektonBitbucketUI @TektonBitbucketAutoDeployUI @TektonBitbucketDeployUIRegression    Examples:      | applicationName     | secondApplicationName | defaultBranchName | codeLanguage          | pipelineName | stageName |      | auto-stable-go-ui-1 | auto-stable-go-ui-2   | master            | go_go_gin_application | autost-go-ui | sit       |  Scenario Outline: Check protected label for deployment flow and environment    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    Given User creates default codebase on bitbucket      | applicationName | <applicationName> |      | codeLanguage    | <codeLanguage>    |    And User opens Deployment Flows tab    When User creates cd pipeline <pipelineName> with deployment type container      | applicationName | <applicationName>   |      | branchName      | <defaultBranchName> |    And User creates stage <stageName> in cd pipeline <pipelineName>      | applicationName | <applicationName> |      | triggerType     | Manual            |      | jobProvisioning | default           |      | source          | default           |      | qualityGateType | manual            |      | stepName        | manual            |    And User creates stage <stageName2> in cd pipeline <pipelineName>      | applicationName | <applicationName> |      | triggerType     | Manual            |      | jobProvisioning | default           |      | source          | default           |      | qualityGateType | manual            |      | stepName        | manual            |    When User set protection label "delete-update" on deploymentFlow with <pipelineName> name    When User set protection label "delete-update" on environment with <pipelineName>-<stageName2> name    And User opens <pipelineName> deployment flow    Then User checks that edit button is disabled for pipeline    Then User checks that delete button is disabled for pipeline    And User opens <stageName2> stage    Then User checks that edit button is disabled for pipeline    Then User checks that delete button is disabled for pipeline    When User set protection label "" on deploymentFlow with <pipelineName> name    When User set protection label "" on environment with <pipelineName>-<stageName2> name    And User opens Deployment Flows tab    And User opens <pipelineName> deployment flow    Then User checks that edit button is enabled for pipeline    Then User checks that delete button is enabled for pipeline    And User opens <stageName2> stage    Then User checks that edit button is enabled for pipeline    Then User checks that delete button is enabled for pipeline    @UI @TektonBitbucketUI @TektonBitbucketAutoDeployUI @TektonBitbucketDeployUIRegression    Examples:      | applicationName | defaultBranchName | codeLanguage      | pipelineName   | stageName | stageName2 |      | protected-flow  | master            | beego_application | protected-flow | dev       | qa         |