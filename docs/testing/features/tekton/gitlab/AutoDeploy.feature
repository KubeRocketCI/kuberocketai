Feature: Auto deploy UI  Scenario Outline: Check auto deploy with promote using deploy trigger template UI    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using semver versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 1.2.3               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User creates new branch with semver versioning type in <applicationName> application      | newBranchName     | <newBranchName> |      | startFromVersion  | 2.3.4           |      | startFromSnapshot | RC              |      | realiseBranch     | True            |    Then User sees created <newBranchName> branch as release    When User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName   | <applicationName> |      | branchName        | <newBranchName>   |      | clusterName       | in-cluster        |      | stageName         | <stageName>       |      | promoteInPipeline | True              |      | triggerType       | Auto              |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens Components tab    And User searches created application by <applicationName> name    And User select created application <applicationName> name    And User triggers build pipeline for <newBranchName> branch name    Then User checks build pipeline status submitted manually for "<newBranchNameFormatted>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <newBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks deployed <applicationName> application in the default namespace for <stageName> stage in <pipelineName> pipeline    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION promoted image available in image stream version popup for <applicationName> application    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    @UI @TektonGitlabUI @TektonGitlabAutoDeployUI    Examples:      | applicationName  | defaultBranchName | codeLanguage           | newBranchName | pipelineName     | stageName | newBranchNameFormatted |      | python38-ui-auto | master            | python_3_8_application | release/2.3   | python38-dp-auto | dev       | release-2.3            |  Scenario Outline: Check auto deploy in custom namespace with promote using deploy-with-autotest trigger template UI    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using semver versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 1.2.3               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User creates new branch with semver versioning type in <applicationName> application      | newBranchName     | <newBranchName> |      | startFromVersion  | 2.3.4           |      | startFromSnapshot | TEST            |    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName     | <applicationName>     |      | branchName          | <newBranchName>       |      | clusterName         | in-cluster            |      | stageName           | <stageName>           |      | promoteInPipeline   | True                  |      | customNamespaceName | <customNamespaceName> |      | triggerType         | Auto                  |      | triggerTemplate     | deploy-with-autotests |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens Components tab    And User searches created application by <applicationName> name    And User select created application <applicationName> name    And User triggers build pipeline for <newBranchName> branch name    Then User checks build pipeline status submitted manually for "<newBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <newBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy-with-autotests trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks deployed <applicationName> application in <customNamespaceName> namespace    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION promoted image available in image stream version popup for <applicationName> application    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks namespace with <customNamespaceName> namespace is deleted    @UI @TektonGitlabUI @TektonGitlabAutoDeployUI    Examples:      | applicationName   | defaultBranchName | codeLanguage             | newBranchName | pipelineName  | stageName | customNamespaceName             |      | java8-grd-ui-auto | master            | java8_gradle_application | test          | java8-dp-auto | dev       | java8-grd-auto-custom-namespace |  Scenario Outline: Check auto deploy without promote using deploy-with-autotests trigger template UI    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName   | <applicationName>     |      | branchName        | <defaultBranchName>   |      | clusterName       | in-cluster            |      | stageName         | <stageName>           |      | triggerType       | Auto                  |      | triggerTemplate   | deploy-with-autotests |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens Components tab    And User searches created application by <applicationName> name    And User select created application <applicationName> name    And User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy-with-autotests trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks deployed <applicationName> application in the default namespace for <stageName> stage in <pipelineName> pipeline    And User checks that IMAGE_VERSION image isn't promoted for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    @UI @TektonGitlabUI @TektonGitlabAutoDeployUI    Examples:      | applicationName  | defaultBranchName | codeLanguage           | pipelineName     | stageName |      | dotnet60-ui-auto | master            | dotnet_6_0_application | dotn60-dp-au | sit       |