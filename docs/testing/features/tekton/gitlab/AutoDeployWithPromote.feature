Feature: Auto Deploy with Promote  Scenario Outline: Check auto deploy in few stages without promote UI    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using semver versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 1.2.3               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User creates new branch with semver versioning type in <applicationName> application      | newBranchName     | <newBranchName> |      | startFromVersion  | 2.3.4           |      | startFromSnapshot | RC              |      | realiseBranch     | True            |    Then User sees created <newBranchName> branch as release    When User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName | <applicationName> |      | branchName      | <newBranchName>   |      | clusterName     | in-cluster        |      | stageName       | <stageName>       |      | triggerType     | Auto              |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User adds stage with <secondStage> name in <pipelineName> pipeline      | clusterName         | in-cluster            |      | triggerType         | Auto                  |      | customNamespaceName | <customNamespaceName> |    And User opens Components tab    And User searches created application by <applicationName> name    And User select created application <applicationName> name    And User triggers build pipeline for <newBranchName> branch name    Then User checks build pipeline status submitted manually for "<newBranchNameFormatted>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <newBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    And User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks deployed <applicationName> application in the default namespace for <stageName> stage in <pipelineName> pipeline    And User checks that IMAGE_VERSION image isn't promoted for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION latest image available in image stream version popup for <applicationName> application    When User opens Deployment Flows tab    And User opens <pipelineName> deployment flow    And User opens <secondStage> stage    Then User sees success status for <secondStage> stage    And User checks deploy pipeline status for <secondStage> stage in <pipelineName> pipeline with deploy trigger template    And User checks deployed <applicationName> application in <customNamespaceName> namespace    And User checks that IMAGE_VERSION image isn't promoted for <applicationName> application for <secondStage> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION latest image available in image stream version popup for <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    And User checks namespace with <customNamespaceName> namespace is deleted    @UI @TektonGitlabUI @TektonGitlabAutoDeployWithPromoteUI    Examples:      | applicationName      | defaultBranchName | codeLanguage         | newBranchName | pipelineName | stageName | secondStage | newBranchNameFormatted | customNamespaceName          |      | js-vue-pnpm-auto-prm | master            | vue_pnpm_application | release/2.3   | vue-auto-prm | dev       | qa          | release/2.3            | js-vue-pnpm-cstm-ns-auto-prm |  Scenario Outline: Check auto deploy in few stages with promote using autotests UI    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User clones codebase using semver versioning type on gitlab      | applicationName   | <autotestName>         |      | codeLanguage      | <autotestCodeLanguage> |      | defaultBranchName | <defaultBranchName>    |      | startFromVersion  | 1.2.3                  |      | startFromSnapshot | SNAPSHOT               |    Then User sees success status and correct values in fields for <autotestName> application      | codeLanguage | <autotestCodeLanguage> |    And User creates codebase using default versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User creates new branch with default versioning type in <applicationName> application      | newBranchName | <newBranchName> |    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName           | <applicationName>     |      | branchName                | <newBranchName>       |      | clusterName               | in-cluster            |      | stageName                 | <stageName>           |      | promoteInPipeline         | True                  |      | qualityGatesName          | autotest              |      | qualityGatesProject       | <autotestName>        |      | qualityGatesProjectBranch | <defaultBranchName>   |      | triggerType               | Auto                  |      | triggerTemplate           | deploy-with-autotests |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User adds stage with <secondStage> name in <pipelineName> pipeline      | clusterName     | in-cluster            |      | triggerType     | Auto                  |      | triggerTemplate | deploy-with-autotests |    And User opens Components tab    And User searches created application by <applicationName> name    And User select created application <applicationName> name    And User triggers build pipeline for <newBranchName> branch name    Then User checks build pipeline status submitted manually for "<newBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <newBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    And User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy-with-autotests trigger template    And User checks autotests-gradle autotest pipeline status for "<stageName>" stage in "<pipelineName>" pipeline    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks deployed <applicationName> application in the default namespace for <stageName> stage in <pipelineName> pipeline    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION latest image available in image stream version popup for <applicationName> application    And User checks that IMAGE_VERSION promoted image available in image stream version popup for <applicationName> application    When User opens Deployment Flows tab    And User opens <pipelineName> deployment flow    And User opens <secondStage> stage    Then User sees success status for <secondStage> stage    And User checks deploy pipeline status for <secondStage> stage in <pipelineName> pipeline with deploy-with-autotests trigger template    And User checks deployed <applicationName> application in the default namespace for <secondStage> stage in <pipelineName> pipeline    And User checks IMAGE_VERSION promoted image for <applicationName> application for <secondStage> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION latest image available in image stream version popup for <applicationName> application    And User checks that IMAGE_VERSION promoted image available in image stream version popup for <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User deletes application with name <autotestName>    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    And User checks default namespace for <secondStage> stage in <pipelineName> pipeline is deleted    @UI @TektonGitlabUI @TektonGitlabAutoDeployWithPromoteUI    Examples:      | applicationName | defaultBranchName | codeLanguage             | newBranchName | pipelineName   | stageName | secondStage | autotestName          | autotestCodeLanguage   |      | flask-auto-prm  | master            | python_flask_application | test          | flask-auto-prm | dev       | qa          | java-11-grd-auto-test | java11_gradle_autotest |