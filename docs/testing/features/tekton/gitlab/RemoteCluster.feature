Feature: Deploy in remote cluster  Scenario Outline: Check deploy in remote cluster without promote using deploy trigger template OKD    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User creates new branch with default versioning type in <applicationName> application      | newBranchName | <newBranchName> |    And User triggers build pipeline for <newBranchName> branch name    Then User checks build pipeline status submitted manually for "<newBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <newBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName | <applicationName> |      | branchName      | <newBranchName>   |      | clusterName     | okd               |      | stageName       | <stageName>       |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks deployed <applicationName> application in the default namespace of OKD cluster for <stageName> stage in <pipelineName> pipeline    And User checks that IMAGE_VERSION image isn't promoted for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted on OKD cluster    @UI @TektonGitlabRemoteOKDClusterDeployUI    Examples:      | applicationName | defaultBranchName | codeLanguage               | newBranchName | pipelineName   | stageName |      | fastapi-remote  | master            | python_fastapi_application | new           | fastapi-remote | sit       |  Scenario Outline: Check deploy in the custom namespace of remote cluster using deploy-with-autotests trigger template OKD    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User clones codebase using semver versioning type on gitlab      | applicationName   | <autotestName>         |      | codeLanguage      | <autotestCodeLanguage> |      | defaultBranchName | <defaultBranchName>    |      | startFromVersion  | 1.2.3                  |      | startFromSnapshot | SNAPSHOT               |    Then User sees success status and correct values in fields for <autotestName> application      | codeLanguage | <autotestCodeLanguage> |    When User clones codebase using semver versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 1.2.3               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User creates new branch with semver versioning type in <applicationName> application      | newBranchName     | <newBranchName> |      | startFromVersion  | 2.3.4           |      | startFromSnapshot | RC              |      | realiseBranch     | True            |    Then User sees created <newBranchName> branch as release    When User triggers build pipeline for <newBranchName> branch name    Then User checks build pipeline status submitted manually for "<newBranchNameFormatted>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <newBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName           | <applicationName>     |      | branchName                | <newBranchName>       |      | clusterName               | okd                   |      | stageName                 | <stageName>           |      | promoteInPipeline         | True                  |      | qualityGatesName          | autotest              |      | qualityGatesProject       | <autotestName>        |      | qualityGatesProjectBranch | <defaultBranchName>   |      | triggerTemplate           | deploy-with-autotests |      | customNamespaceName       | <customNamespaceName> |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy-with-autotests trigger template    And User checks autotests-gradle autotest pipeline status for "<stageName>" stage in "<pipelineName>" pipeline    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION promoted image available in image stream version popup for <applicationName> application    And User checks deployed <applicationName> application in <customNamespaceName> namespace on OKD cluster    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User deletes application with name <autotestName>    And User checks namespace with <customNamespaceName> namespace is deleted on OKD cluster    @UI @TektonGitlabRemoteOKDClusterDeployUI    Examples:      | applicationName  | defaultBranchName | codeLanguage       | newBranchName | pipelineName  | stageName | newBranchNameFormatted | autotestName    | autotestCodeLanguage   | customNamespaceName     |      | antora-remote-ui | master            | antora_application | release/2.3   | antora-rmt-ui | dev       | release-2.3            | java17-grd-test | java17_gradle_autotest | antora-custom-ns-remote |  Scenario Outline: Check auto deploy with promote using deploy trigger template in remote cluster OKD    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName   | <applicationName>   |      | branchName        | <defaultBranchName> |      | clusterName       | okd                 |      | promoteInPipeline | True                |      | stageName         | <stageName>         |      | triggerType       | Auto                |      | triggerTemplate   | deploy              |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens Components tab    And User searches created application by <applicationName> name    And User select created application <applicationName> name    And User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks deployed <applicationName> application in the default namespace of OKD cluster for <stageName> stage in <pipelineName> pipeline    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted on OKD cluster    @UI @TektonGitlabRemoteOKDClusterDeployUI    Examples:      | applicationName  | defaultBranchName | codeLanguage           | pipelineName     | stageName |      | python38-rmt-aut | master            | python_3_8_application | python38-rmt-aut | sit       |  Scenario Outline: Check deploy using custom values file with custom namespace in remote cluster OKD    Given Used adds custom values file to the GitOps repository with parameters gitlab project      | applicationName | <applicationName> |      | pipelineName    | <pipelineName>    |      | stageName       | <stageName>       |      | content         | replicaCount: 2   |    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    And User opens Components tab    And User creates codebase using semver versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 7.9.5               |      | startFromSnapshot | NEW-SNAPSHOT        |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName     | <applicationName>     |      | branchName          | <defaultBranchName>   |      | clusterName         | okd                   |      | stageName           | <stageName>           |      | customNamespaceName | <customNamespaceName> |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version and custom values file    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks deployed <applicationName> application in <customNamespaceName> namespace with 2 replicas on OKD cluster    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks namespace with <customNamespaceName> namespace is deleted on OKD cluster    @UI @TektonGitlabRemoteOKDClusterDeployUI    Examples:      | applicationName  | defaultBranchName | codeLanguage              | pipelineName     | stageName | customNamespaceName           |      | java11-g-ops-rmt | master            | java11_gradle_application | java11-g-ops-rmt | dev       | java11-g-custom-ns-ops-remote |  Scenario Outline: Check deploy in remote cluster without promote using deploy trigger template vCluster    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User creates new branch with default versioning type in <applicationName> application      | newBranchName | <newBranchName> |    And User triggers build pipeline for <newBranchName> branch name    Then User checks build pipeline status submitted manually for "<newBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <newBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName | <applicationName> |      | branchName      | <newBranchName>   |      | clusterName     | vcluster          |      | stageName       | <stageName>       |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status#    And User checks deployed <applicationName> application in the default namespace of OKD cluster for <stageName> stage in <pipelineName> pipeline    And User checks that IMAGE_VERSION image isn't promoted for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>#    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted on OKD cluster    @UI @TektonGitlabRemoteVClusterDeployUI @GitlabRemoteVCluster    Examples:      | applicationName  | defaultBranchName | codeLanguage        | newBranchName | pipelineName     | stageName |      | fastapi-vcluster | master            | fastapi_application | new           | fastapi-vcluster | sit       |  Scenario Outline: Check deploy in the custom namespace of remote cluster using deploy-with-autotests trigger template vCluster    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User clones codebase using semver versioning type on gitlab      | applicationName   | <autotestName>         |      | codeLanguage      | <autotestCodeLanguage> |      | defaultBranchName | <defaultBranchName>    |      | startFromVersion  | 1.2.3                  |      | startFromSnapshot | SNAPSHOT               |    Then User sees success status and correct values in fields for <autotestName> application      | codeLanguage | <autotestCodeLanguage> |    When User clones codebase using semver versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 1.2.3               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User creates new branch with semver versioning type in <applicationName> application      | newBranchName     | <newBranchName> |      | startFromVersion  | 2.3.4           |      | startFromSnapshot | RC              |      | realiseBranch     | True            |    Then User sees created <newBranchName> branch as release    When User triggers build pipeline for <newBranchName> branch name    Then User checks build pipeline status submitted manually for "<newBranchNameFormatted>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <newBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName           | <applicationName>     |      | branchName                | <newBranchName>       |      | clusterName               | vcluster              |      | stageName                 | <stageName>           |      | promoteInPipeline         | True                  |      | qualityGatesName          | autotest              |      | qualityGatesProject       | <autotestName>        |      | qualityGatesProjectBranch | <defaultBranchName>   |      | triggerTemplate           | deploy-with-autotests |      | customNamespaceName       | <customNamespaceName> |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy-with-autotests trigger template    And User checks autotests-gradle autotest pipeline status for "<stageName>" stage in "<pipelineName>" pipeline    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION promoted image available in image stream version popup for <applicationName> application#    And User checks deployed <applicationName> application in <customNamespaceName> namespace on OKD cluster    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User deletes application with name <autotestName>#    And User checks namespace with <customNamespaceName> namespace is deleted on OKD cluster    @UI @TektonGitlabRemoteVClusterDeployUI @GitlabRemoteVCluster    Examples:      | applicationName    | defaultBranchName | codeLanguage       | newBranchName | pipelineName  | stageName | newBranchNameFormatted | autotestName             | autotestCodeLanguage   | customNamespaceName       |      | antora-vcluster-ui | master            | antora_application | release/2.3   | antora-vcl-ui | dev       | release-2.3            | java17-grd-test-vcluster | java17_gradle_autotest | antora-custom-ns-vcluster |  Scenario Outline: Check auto deploy with promote using deploy trigger template in remote cluster vCluster    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName   | <applicationName>   |      | branchName        | <defaultBranchName> |      | clusterName       | vcluster            |      | promoteInPipeline | True                |      | stageName         | <stageName>         |      | triggerType       | Auto                |      | triggerTemplate   | deploy              |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens Components tab    And User searches created application by <applicationName> name    And User select created application <applicationName> name    And User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status#    And User checks deployed <applicationName> application in the default namespace of OKD cluster for <stageName> stage in <pipelineName> pipeline    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>#    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted on OKD cluster    @UI @TektonGitlabRemoteVClusterDeployUI @GitlabRemoteVCluster    Examples:      | applicationName  | defaultBranchName | codeLanguage           | pipelineName     | stageName |      | python38-vcl-aut | master            | python_3_8_application | python38-vcl-aut | sit       |  Scenario Outline: Check deploy using custom values file with custom namespace in remote cluster vCluster    Given Used adds custom values file to the GitOps repository with parameters gitlab project      | applicationName | <applicationName> |      | pipelineName    | <pipelineName>    |      | stageName       | <stageName>       |      | content         | replicaCount: 2   |    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    And User opens Components tab    And User creates codebase using semver versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 7.9.5               |      | startFromSnapshot | NEW-SNAPSHOT        |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName     | <applicationName>     |      | branchName          | <defaultBranchName>   |      | clusterName         | vcluster              |      | stageName           | <stageName>           |      | customNamespaceName | <customNamespaceName> |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version and custom values file    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status#    And User checks deployed <applicationName> application in <customNamespaceName> namespace with 2 replicas on OKD cluster    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>#    And User checks namespace with <customNamespaceName> namespace is deleted on OKD cluster    @UI @TektonGitlabRemoteVClusterDeployUI @GitlabRemoteVCluster    Examples:      | applicationName  | defaultBranchName | codeLanguage              | pipelineName     | stageName | customNamespaceName             |      | java11-g-ops-vcl | master            | java11_gradle_application | java11-g-ops-vcl | dev       | java11-g-custom-ns-ops-vcluster |