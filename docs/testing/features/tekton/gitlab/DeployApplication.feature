Feature: Deploy applications added using Create, Clone and Import strategies GitLab  Scenario Outline: Deploy application added using Import strategy with default versioning type    Given User creates default codebase on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    When User receive and save GitLab project ID for project <applicationName>    And User deletes "<applicationName>" codebase resources    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User imports codebase using default versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User creates new branch with default versioning type in <applicationName> application      | newBranchName | <newBranchName> |    And User triggers build pipeline for <newBranchName> branch name    Then User checks build pipeline status submitted manually for "<newBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <newBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName | <applicationName> |      | branchName      | <newBranchName>   |      | clusterName     | in-cluster        |      | stageName       | <stageName>       |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks logs and terminal popups in default namespace for <applicationName> application <pipelineName> pipeline <stageName> stage    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User deletes gitlab fork project    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    @UI @TektonGitlabUI @TektonGitlabDeployUI    Examples:      | applicationName  | defaultBranchName | codeLanguage             | newBranchName | pipelineName | stageName |      | java8-grd-dep-ui | master            | java8_gradle_application | new-default   | java8-grd-dp | sit       |  Scenario Outline: Deploy application added using Clone strategy with semver versioning type    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User clones codebase using semver versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 4.3.5               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User creates new branch with semver versioning type in <applicationName> application      | newBranchName     | <newBranchName> |      | startFromVersion  | 2.3.4           |      | startFromSnapshot | NEW-SNAPSHOT    |    And User triggers build pipeline for <newBranchName> branch name    Then User checks build pipeline status submitted manually for "<newBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <newBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName | <applicationName> |      | branchName      | <newBranchName>   |      | clusterName     | in-cluster        |      | stageName       | <stageName>       |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    @UI @TektonGitlabUI @TektonGitlabDeployUI    Examples:      | applicationName      | defaultBranchName | codeLanguage          | newBranchName | pipelineName | stageName |      | go-gin-gitlab-dep-ui | master            | go_go_gin_application | new-semver    | go-gin-dp    | dev       |  Scenario Outline: Deploy application added using Create strategy with semver versioning type release branch    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using semver versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 7.5.3               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User creates new branch with semver versioning type in <applicationName> application      | newBranchName     | <newBranchName> |      | startFromVersion  | 7.5.3           |      | startFromSnapshot | RC              |      | realiseBranch     | True            |    Then User sees created <newBranchName> branch as release    When User triggers build pipeline for <newBranchName> branch name    Then User checks build pipeline status submitted manually for "<newBranchNameFormatted>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <newBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName | <applicationName> |      | branchName      | <newBranchName>   |      | clusterName     | in-cluster        |      | stageName       | <stageName>       |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    @UI @TektonGitlabUI @TektonGitlabDeployUI    Examples:      | applicationName         | defaultBranchName | codeLanguage       | newBranchName | pipelineName | stageName | newBranchNameFormatted |      | js-antora-gitlab-dep-ui | master            | antora_application | release/7.5   | antora-dp    | dev       | release-7.5            |  Scenario Outline: Check deploy <codeLanguage> application in custom namespace with semver versioning type using create strategy    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using semver versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 8.6.4               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName     | <applicationName>     |      | branchName          | <defaultBranchName>   |      | clusterName         | in-cluster            |      | stageName           | <stageName>           |      | customNamespaceName | <customNamespaceName> |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks deployed <applicationName> application in <customNamespaceName> namespace    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks namespace with <customNamespaceName> namespace is deleted    @UI @TektonGitlabUI @TektonGitlabDeployUI    Examples:      | applicationName            | defaultBranchName | codeLanguage          | pipelineName | stageName | customNamespaceName   |      | next-create-dep-cn-ui      | master            | next_application      | next-dp-cn   | dev       | next-custom-namespace |      | js-next-pnpm-crt-dep-cn-ui | master            | next_pnpm_application | next-dp-cn   | dev       | js-next-pnpm-cstm-ns  |  Scenario Outline: Check deploy <codeLanguage> application using custom values file with semver versioning type using create strategy    Given Used adds custom values file to the GitOps repository with parameters gitlab project      | applicationName | <applicationName> |      | pipelineName    | <pipelineName>    |      | stageName       | <stageName>       |      | content         | replicaCount: 2   |    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    And User opens Components tab    And User creates codebase using semver versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 8.6.4               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName | <applicationName>   |      | branchName      | <defaultBranchName> |      | clusterName     | in-cluster          |      | stageName       | <stageName>         |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version and custom values file    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks deployed <applicationName> application in the default namespace for <stageName> stage in <pipelineName> pipeline with 2 replicas    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    @UI @TektonGitlabUI @TektonGitlabDeployUI    Examples:      | applicationName      | defaultBranchName | codeLanguage       | pipelineName  | stageName |      | antora-dep-gitops-ui | master            | antora_application | antora-gitops | dev       |  Scenario Outline: Check deploy <codeLanguage> application using custom values file with ingress default version create strategy    Given Used adds custom values file to the GitOps repository with parameters gitlab project      | applicationName | <applicationName>         |      | pipelineName    | <pipelineName>            |      | stageName       | <stageName>               |      | content         | ingress:\n  enabled: true |    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    And User opens Components tab    And User creates codebase using semver versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 7.9.5               |      | startFromSnapshot | NEW-SNAPSHOT        |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName | <applicationName>   |      | branchName      | <defaultBranchName> |      | clusterName     | in-cluster          |      | stageName       | <stageName>         |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version and custom values file    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User checks ingress link in default namespace for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks deployed <applicationName> application in the default namespace for <stageName> stage in <pipelineName> pipeline    And User checks create ingress in default namespace for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    @UI @TektonGitlabUI @TektonGitlabDeployUI    Examples:      | applicationName   | defaultBranchName | codeLanguage       | pipelineName   | stageName |      | antora-ingress-ui | master            | antora_application | antora-ingress | dev       |  Scenario Outline: Check clean pipeline run for <codeLanguage> application using default version create strategy    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName | <applicationName>   |      | branchName      | <defaultBranchName> |      | clusterName     | in-cluster          |      | stageName       | <stageName>         |    And User waits till <pipelineName> pipeline with <stageName> stage will be created    And User opens Deployment Flows tab    Then User sees success status for <pipelineName> deployment flow    When User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User opens Deployment Flows tab    When User opens <pipelineName> deployment flow    When I login to ArgoCd from <stageName> pipeline    When User checks <stageName> pipeline has healthy status on ArgoCd    When User switches to 1 browser tab    When User triggers Clean pipeline for <stageName> environment    When User opens Pipelines tab    Then User select and checks pipeline with clean type success status for <pipelineName>-<stageName> codebase    When User switches to 2 browser tab    When User checks <stageName> pipeline has missing status on ArgoCd    @UI @TektonGitlabUI @TektonGitlabDeployUI    Examples:      | applicationName     | defaultBranchName | codeLanguage              | pipelineName | stageName |      | java11-glb-clean-ui | master            | java11_gradle_application | java11-clean | dev       |  Scenario Outline: Check create/edit/delete variables on Variables tab    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName | <applicationName>   |      | branchName      | <defaultBranchName> |      | clusterName     | in-cluster          |      | stageName       | <stageName>         |    And User opens <stageName> stage    And User opens Variables tab on Deployment Flows tab    And User adds key1 variable with value1 value on Variables tab    And User adds key2 variable with value2 value on Variables tab    And User saves changes on Variables tab    Then User checks that variables are present on Variable tab and <pipelineName>-<stageName> ConfigMap:      | key  | value  |      | key1 | value1 |      | key2 | value2 |    When User adds key3 variable with value3 value on Variables tab    And User undo changes on Variables tab    Then User checks that variables are present on Variable tab and <pipelineName>-<stageName> ConfigMap:      | key  | value  |      | key1 | value1 |      | key2 | value2 |    When User deletes variable key2 on Variables tab    And User saves changes on Variables tab    Then User checks that variables aren't present on Variable tab and <pipelineName>-<stageName> ConfigMap:      | key  | value  |      | key2 | value2 |    When User deletes variable key1 on Variables tab    Then User checks message is present:    """    Are you sure you want to save empty variable list?    """    When User saves changes on Variables tab    Then User checks message is present:    """    No variables found.    """    @UI @TektonGitlabUI    Examples:      | applicationName       | defaultBranchName | codeLanguage              | pipelineName  | stageName |      | java11-glab-vartab-ui | master            | java11_gradle_application | java11-vartab | dev       |  Scenario Outline: Check custom deploy/clean pipelines set in pipeline creation    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    And User creates custom clean trigger template with testclean name    And User creates custom deploy trigger template with testdeploy name    And User opens Deployment Flows tab    And User creates cd pipeline <pipelineName>      | applicationName | <applicationName>   |      | branchName      | <defaultBranchName> |      | clusterName     | in-cluster          |      | stageName       | <stageName>         |      | triggerTemplate | testdeploy          |      | cleanTemplate   | testclean           |    Then User waits till <pipelineName> pipeline with <stageName> stage will be created    And User deletes custom trigger template with testclean name    And User deletes custom trigger template with testdeploy name    @UI @TektonGitlabUI    Examples:      | applicationName       | defaultBranchName | codeLanguage             | pipelineName   | stageName |      | java8-lab-custpipe-ui | master            | java8_gradle_application | java8-custpipe | dev       |