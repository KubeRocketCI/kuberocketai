Feature: Applications provisioning using Create strategy on gitlab  Scenario Outline: Create application using Create strategy with Default versioning    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User deletes application with name <applicationName>    @UI @TektonGitlabUI @TektonGitlabCreateUI    Examples:      | applicationName               | defaultBranchName | codeLanguage             |      | java17-maven-cr-def-gitlab-ui | master            | java17_maven_application |      | dotnet-6-cr-def-gitlab-ui     | master            | dotnet_6_0_library       |  Scenario Outline: Create empty project using Create strategy with Default versioning    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | emptyProject      | True                |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User deletes application with name <applicationName>    @UI @TektonGitlabUI @TektonGitlabCreateUI    Examples:      | applicationName                    | defaultBranchName | codeLanguage       |      | python3-create-def-empty-gitlab-ui | master            | python_3_8_library |  Scenario Outline: Create application using Create strategy with semver versioning    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using semver versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 1.0.1               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User deletes application with name <applicationName>    @UI @TektonGitlabUI @TektonGitlabCreateUI    Examples:      | applicationName            | defaultBranchName | codeLanguage             |      | js-expr-pnpm-cr-smvr-gl-ui | master            | express_pnpm_application |      | dotnet3-lib-cr-smvr-gl-ui  | master            | python_3_8_library       |  Scenario Outline:Create empty project using Create strategy with semver versioning    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using semver versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | emptyProject      | True                |      | startFromVersion  | 1.0.1               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User deletes application with name <applicationName>    @UI @TektonGitlabUI @TektonGitlabCreateUI    Examples:      | applicationName                      | defaultBranchName | codeLanguage             |      | go-gin-create-semver-empty-gitlab-ui | master            | operator_sdk_application |  Scenario Outline: Create application using Clone strategy with Default versioning    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User clones codebase using default versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User deletes application with name <applicationName>    @UI @TektonGitlabUI @TektonGitlabCloneUI    Examples:      | applicationName                  | defaultBranchName | codeLanguage             |      | java11-maven-clone-def-gitlab-ui | master            | java11_maven_application |      | dotnet-6-clone-def-gitlab-ui     | master            | dotnet_6_0_library       |  Scenario Outline: Create application using Clone strategy with semver versioning    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User clones codebase using semver versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 1.0.1               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User deletes application with name <applicationName>    @UI @TektonGitlabUI @TektonGitlabCloneUI    Examples:      | applicationName                      | defaultBranchName | codeLanguage          |      | js-express-clone-semver-gitlab-ui    | master            | express_application   |      | terraform-lib-clone-semver-gitlab-ui | master            | hcl_terraform_library |  Scenario Outline: Create application using Import strategy with Default versioning    Given User creates default codebase on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    And User receive and save GitLab project ID for project <applicationName>    And User deletes "<applicationName>" codebase resources    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User imports codebase using default versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User deletes application with name <applicationName>    And User deletes gitlab fork project    @UI @TektonGitlabUI @TektonGitlabImportUI    Examples:      | applicationName                    | defaultBranchName | codeLanguage              |      | java11-gradle-import-def-gitlab-ui | master            | java11_gradle_application |      | codenarc-import-def-gitlab-ui      | master            | codenarc_library          |  Scenario Outline: Create application using Imports strategy with semver versioning    Given User creates semver codebase on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    And User receive and save GitLab project ID for project <applicationName>    And User deletes "<applicationName>" codebase resources    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User imports codebase using semver versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 1.0.1               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User deletes application with name <applicationName>    And User deletes gitlab fork project    @UI @TektonGitlabUI @TektonGitlabImportUI    Examples:      | applicationName                    | defaultBranchName | codeLanguage      |      | beego-import-semver-gitlab-ui      | master            | beego_application |      | docker-lib-import-semver-gitlab-ui | master            | docker_library    |  Scenario Outline: Edit build/review pipelines for a branch    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on gitlab      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User open Edit <defaultBranchName> modal    And User edit application pipelines      | Review | <review> |      | Build  | <build>  |    Then User checks pipeline in codebase spec is updated with values      | applicationName | <applicationName> |      | review          | <review>          |      | build           | <build>           |    When User triggers build pipeline for <defaultBranchName> branch name    And User checks pipeline tekton.dev/pipeline label is <build> in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    And User deletes application with name <applicationName>    @UI @TektonGitlabUI    Examples:      | applicationName                   | defaultBranchName | codeLanguage             | review                          | build                                 |      | java11-maven-create-def-gitlab-ui | master            | java11_maven_application | gitlab-gradle-java17-app-review | gitlab-gradle-java17-app-build-semver |