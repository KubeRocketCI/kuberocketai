Feature: Custom resource creation using KubeRocketCI gitlab  Scenario Outline: Create codebase with default versioning type, cd pipeline using custom resource creation    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User creates codebase using default versioning type on gitlab using create resource popup      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    And User opens Components tab    And User searches created application by <applicationName> name    And User select created application <applicationName> name    And User triggers build pipeline for <defaultBranchName> branch name    Then User checks build pipeline status submitted manually for "<defaultBranchName>" branch in "<applicationName>" codebase    And User checks build pipeline status in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User creates cd pipeline <pipelineName> using create resource popup      | applicationName | <applicationName>   |      | branchName      | <defaultBranchName> |    And User creates stage <stageName> in cd pipeline <pipelineName> using create resource popup      | applicationName | <applicationName> |      | triggerType     | Manual            |      | source          | default           |      | qualityGateType | manual            |      | stepName        | manual            |    And User opens Deployment Flows tab    And User opens <pipelineName> deployment flow    And User opens <stageName> stage    Then User sees success status for <stageName> stage    When User deploys <applicationName> application with saved image version    Then User checks deploy pipeline status for <stageName> stage in <pipelineName> pipeline with deploy trigger template    And User waits till <applicationName> application for <stageName> stage in <pipelineName> pipeline will be deployed with success status    And User uninstalls <applicationName> application    And User deletes <pipelineName> cd pipeline    And User deletes application with name <applicationName>    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    @UI @TektonGitlabUI    Examples:      | applicationName     | defaultBranchName | codeLanguage          | pipelineName    | stageName |      | gin-go-def-resource | master            | go_go_gin_application | gin-go-resource | dev       |