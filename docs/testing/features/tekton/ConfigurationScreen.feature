Feature: Configuration screen features  @UI @TektonGerritUI @TektonGithubUI @TektonGitlabUI @TektonBitbucketUI @Configurations  Scenario: Check configuration screen fields    Given User opens KubeRocketCI as default user    When User opens Configuration tab    Then User checks Git Servers configuration parameters    And User checks Clusters configuration parameters    And User checks Registry configuration parameters    And User checks "SonarQube" configuration parameters in "Code Quality" tab with ci-sonarqube secret    And User checks "Nexus" configuration parameters in "Artifacts Storage" tab with ci-nexus secret    And User checks "DefectDojo" configuration parameters in "Security" tab with ci-defectdojo secret    And User checks "DependencyTrack" configuration parameters in "Security" tab with ci-dependency-track secret    And User checks "Jira" configuration parameters in "Management Tool" tab with ci-jira secret    And User checks GitOps configuration parameters    And User checks Links configuration parameters    And User checks "Argo CD" configuration parameters in "Deployment" tab with ci-argocd secret  @UI @SetupSecrets @Configurations  Scenario: Setup required secrets using configuration screen    Given User opens KubeRocketCI as cluster-admin-with-token user    When User opens Configuration tab    And User integrates with Git Server#    And User integrates with OKD Cluster account    And User integrates with Registry service account    And User integrates with SonarQube service account    And User integrates with Nexus service account    And User integrates with DefectDojo service account    And User integrates with DependencyTrack service account    And User integrates with Jira service account    And User adds GitOps repository base on git server using create strategy#      And User integrates with Argo CD service account TODO investigate how to automate integration  @UI @ValidateIntegrations @Configurations  Scenario: Setup required secrets using configuration screen    Given User opens KubeRocketCI as default user    When User opens Configuration tab    And User validates integration with Git Server    And User validates integration with Registry service account    And User validates integration with SonarQube service account    And User validates integration with DependencyTrack service account    And User validates integration with Nexus service account    And User validates integration with DefectDojo service account    And User validates integration with Jira service account#    And User validates integration with Argo CD service account TODO  @UI @TektonGithubUI @TektonGitlabUI @TektonBitbucketUI @GitOpsCreate @Configurations  Scenario: Create GitOps repository using import strategy    Given User opens KubeRocketCI as default user    And User deletes "krci-gitops-import" codebase resources    When User opens Configuration tab    And User adds GitOps repository base on git server using import strategy  @UI @TektonGithubUI @TektonGitlabUI @TektonBitbucketUI @Configurations  Scenario Outline: Setting up bearer remote cluster    Given User opens KubeRocketCI as default user    When User opens Configuration tab    When User opens Clusters tab on Deployment menu    And User deletes <clusterName> cluster with type <clusterType> if present    When User creates <clusterType> cluster with <clusterName> name    Then User checks <clusterName> connection is <status>    Examples:      | clusterName     | clusterType | status  |      | default-cluster | bearer      | success |  @UI @TektonGithubUI @TektonGitlabUI @TektonBitbucketUI @Configurations  Scenario Outline: Setting irsa up remote cluster    Given User opens KubeRocketCI as default user    When User opens Configuration tab    And User opens Clusters tab on Deployment menu    And User deletes <clusterName> cluster with type <clusterType> if present    And User creates <clusterType> cluster with <clusterName> name    Then User checks <clusterName> connection is <status>    When User deletes <clusterName> cluster with type <clusterType> if present    And User creates unsuccessful irsa cluster with <clusterName> name    Then User checks <clusterName> connection is <failStatus>    When User edit irsa cluster with <clusterName> name    Then User wait <clusterName> cluster in <status> status    When User creates duplicate <clusterType> cluster with <clusterName> name    Then User checks error message "<errorMessage>" is displayed    And User checks the popup form is not clear after error for <clusterType> cluster with <clusterName> name    Examples:      | clusterName | clusterType | status  | failStatus | errorMessage                                                     |      | eks-sandbox | irsa        | success | false      | Error: Conflict - secrets \"eks-sandbox-cluster\" already exists |  @UI @Configurations  Scenario: Setting up gitservers    Given User opens KubeRocketCI as cluster-admin-with-token user    When User opens Configuration tab    And User integrates with Git Server    And User validates integration with Git Server