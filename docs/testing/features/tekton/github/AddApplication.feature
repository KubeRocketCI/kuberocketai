Feature: Applications provisioning using Create strategy on github  Scenario Outline: Create application using Create strategy with Default versioning    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on github      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User deletes application with name <applicationName>    And User deletes "<applicationName>" github project    @UI @TektonGithubUI @TektonGithubCreateUI    Examples:      | applicationName                   | defaultBranchName | codeLanguage             |      | java11-maven-create-def-github-ui | master            | java11_maven_application |      | express-lib-create-def-github-ui  | master            | express_library          |  Scenario Outline: Create empty project using Create strategy with Default versioning    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on github      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | emptyProject      | True                |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User deletes application with name <applicationName>    And User deletes "<applicationName>" github project    @UI @TektonGithubUI @TektonGithubCreateUI    Examples:      | applicationName                  | defaultBranchName | codeLanguage             |      | flask-create-def-empty-github-ui | master            | python_flask_application |  Scenario Outline: Create application using Create strategy with semver versioning    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using semver versioning type on github      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 1.0.1               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User deletes application with name <applicationName>    And User deletes "<applicationName>" github project    @UI @TektonGithubUI @TektonGithubCreateUI    Examples:      | applicationName                    | defaultBranchName | codeLanguage          |      | js-ang-crt-smvr-gh-ui              | master            | angular_application   |      | j21-gr-lib-create-semver-github-ui | master            | java21_gradle_library |  Scenario Outline:Create empty project using Create strategy with semver versioning    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using semver versioning type on github      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | emptyProject      | True                |      | startFromVersion  | 1.0.1               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User deletes application with name <applicationName>    And User deletes "<applicationName>" github project    @UI @TektonGithubUI @TektonGithubCreateUI    Examples:      | applicationName                      | defaultBranchName | codeLanguage   |      | docker-create-semver-empty-github-ui | master            | docker_library |  Scenario Outline: Create application using Clone strategy with Default versioning    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User clones codebase using default versioning type on github      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User deletes application with name <applicationName>    And User deletes "<applicationName>" github project    @UI @TektonGithubUI @TektonGithubCloneUI    Examples:      | applicationName                  | defaultBranchName | codeLanguage             |      | java17-maven-clone-def-github-ui | master            | java17_maven_application |      | express-lib-clone-def-github-ui  | master            | express_library          |  Scenario Outline: Create application using Clone strategy with semver versioning    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User clones codebase using semver versioning type on github      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 1.0.1               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User deletes application with name <applicationName>    And User deletes "<applicationName>" github project    @UI @TektonGithubUI @TektonGithubCloneUI    Examples:      | applicationName            | defaultBranchName | codeLanguage             |      | js-ang-pnpm-cln-smvr-gh-ui | master            | angular_pnpm_application |      | j17-gr-lib-cln-smvr-gh-ui  | master            | java17_gradle_library    |  Scenario Outline: Create application using Import strategy with Default versioning    Given User generates "<codeLanguage>" github project with "<applicationName>" project name    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User imports codebase using default versioning type on github      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User deletes application with name <applicationName>    And User deletes "<applicationName>" github project    @UI @TektonGithubUI @TektonGithubImportUI    Examples:      | applicationName                    | defaultBranchName | codeLanguage             |      | go-sdk-import-def-github-ui        | master            | operator_sdk_application |      | terraform-lib-import-def-github-ui | master            | hcl_terraform_library    |  Scenario Outline: Create application using Import strategy with semver versioning    Given User generates "<codeLanguage>" github project with "<applicationName>" project name    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User imports codebase using semver versioning type on github      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |      | startFromVersion  | 1.0.1               |      | startFromSnapshot | SNAPSHOT            |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    And User deletes application with name <applicationName>    And User deletes "<applicationName>" github project    @UI @TektonGithubUI @TektonGithubImportUI    Examples:      | applicationName                      | defaultBranchName | codeLanguage             |      | java17-mvn-import-semver-github-ui   | master            | java17_maven_application |      | rego-opa-lib-import-semver-github-ui | master            | opa_library              |  Scenario Outline: Edit build/review pipelines for a branch    Given User opens KubeRocketCI as default user    When User deletes <applicationName> Sonar project if present    When User opens Components tab    And User creates codebase using default versioning type on github      | applicationName   | <applicationName>   |      | codeLanguage      | <codeLanguage>      |      | defaultBranchName | <defaultBranchName> |    Then User sees success status and correct values in fields for <applicationName> application      | codeLanguage | <codeLanguage> |    When User select created application <applicationName> name    Then User sees created <defaultBranchName> branch as default    When User open Edit <defaultBranchName> modal    And User edit application pipelines      | Review | <review> |      | Build  | <build>  |    Then User checks pipeline in codebase spec is updated with values      | applicationName | <applicationName> |      | review          | <review>          |      | build           | <build>           |    And User triggers build pipeline for <defaultBranchName> branch name    And User checks pipeline tekton.dev/pipeline label is <build> in KubeRocketCI for <defaultBranchName> branch in <applicationName> codebase    And User deletes application with name <applicationName>    And User deletes "<applicationName>" github project    @UI @TektonGithubUI    Examples:      | applicationName                   | defaultBranchName | codeLanguage             | review                          | build                                  |      | java11-maven-create-def-gerrit-ui | master            | java11_maven_application | github-gradle-java17-app-review | github-gradle-java17-app-build-default |