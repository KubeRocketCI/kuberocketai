Feature: Auto Deploy with Promote  Scenario Outline: Check auto deploy in few stages without promote    When User deletes <applicationName> Sonar project if present    Given User creates semver codebase on bitbucket      | applicationName | <applicationName> |      | codeLanguage    | <codeLanguage>    |      | startFrom       | <startFrom>       |    When User creates new release branch      | applicationName  | <applicationName>  |      | branchName       | <newBranchName>    |      | newBranchVersion | <newBranchVersion> |    And User creates cd pipeline <pipelineName> with deployment type container      | applicationName | <applicationName> |      | branchName      | <newBranchName>   |    And User creates stage <stageName> in cd pipeline <pipelineName>      | applicationName | <applicationName> |      | triggerType     | Auto              |      | jobProvisioning | default           |      | source          | default           |      | qualityGateType | manual            |      | stepName        | manual            |    And User creates stage <secondStage> in cd pipeline <pipelineName>      | applicationName     | <applicationName>     |      | triggerType         | Auto                  |      | jobProvisioning     | default               |      | source              | default               |      | qualityGateType     | manual                |      | stepName            | manual                |      | customNamespaceName | <customNamespaceName> |    And User triggers build pipeline type for <newBranchName> branch in <applicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<newBranchName>" branch in "<applicationName>" codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    Then User checks deploy pipeline and application status for <applicationName> application in <stageName> stage <pipelineName> pipeline    And User checks deploy pipeline and application status for <applicationName> application in <secondStage> stage <pipelineName> pipeline    And User checks deployed <applicationName> application in the default namespace for <stageName> stage in <pipelineName> pipeline    And User checks deployed <applicationName> application in <customNamespaceName> namespace    And User checks that IMAGE_VERSION image isn't promoted for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION image isn't promoted for <applicationName> application for <secondStage> stage <pipelineName> pipeline    And User deletes <pipelineName> application set    And User deletes <pipelineName>-<secondStage> cd pipeline stage resources    And User deletes <pipelineName>-<stageName> cd pipeline stage resources    And User deletes <pipelineName> cd pipeline resources    And User deletes "<applicationName>" codebase resources    And User checks namespace with <customNamespaceName> namespace is deleted    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    @TektonBitbucket @TektonBitbucketShortRegression @TektonBitbucketDeployRegression    Examples:      | applicationName   | codeLanguage               | newBranchName | startFrom      | newBranchVersion | pipelineName    | stageName | secondStage | customNamespaceName              |      | antora-auto-prm   | antora_application         | release-2.3   | 2.3.1-SNAPSHOT | 2.3.1-RC         | antora-auto-prm | sit       | qa          | antora-custom-namespace-auto-prm |      | cpp-cmake-app-prm | cpp_none_cmake_application | release-2.3   | 2.3.1-SNAPSHOT | 2.3.1-RC         | cpp-c-auto-prm  | sit       | qa          | cpp-custom-namespace-auto-prm    |  Scenario Outline: Check auto deploy in few stages with promote using autotests    When User deletes <applicationName> Sonar project if present    Given User clones semver codebase on bitbucket      | applicationName | <autotestName>         |      | codeLanguage    | <autotestCodeLanguage> |      | startFrom       | 1.2.3-SNAPSHOT         |    When User creates semver codebase on bitbucket      | applicationName | <applicationName> |      | codeLanguage    | <codeLanguage>    |      | startFrom       | 8.3.1-SNAPSHOT    |    And User creates new branch      | applicationName  | <applicationName>  |      | branchName       | <newBranchName>    |      | newBranchVersion | <newBranchVersion> |    And User creates cd pipeline <pipelineName> with deployment type container      | applicationName   | <applicationName> |      | branchName        | <newBranchName>   |      | promoteInPipeline | True              |    And User creates stage <stageName> in cd pipeline <pipelineName>      | applicationName | <applicationName>     |      | triggerType     | Auto                  |      | jobProvisioning | default               |      | source          | default               |      | qualityGateType | autotests             |      | stepName        | auto-test             |      | autotestName    | <autotestName>        |      | branchName      | master                |      | triggerTemplate | deploy-with-autotests |    And User creates stage <secondStage> in cd pipeline <pipelineName>      | applicationName | <applicationName> |      | triggerType     | Auto              |      | jobProvisioning | default           |      | source          | default           |      | qualityGateType | manual            |      | stepName        | manual            |      | triggerTemplate | deploy            |    And User triggers build pipeline type for <newBranchName> branch in <applicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<newBranchName>" branch in "<applicationName>" codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    Then User checks autotests-gradle autotest pipeline status for "<stageName>" stage in "<pipelineName>" pipeline    And User checks deploy-with-autotests pipeline and application status for <applicationName> application in <stageName> stage <pipelineName> pipeline    And User checks deployed <applicationName> application in the default namespace for <stageName> stage in <pipelineName> pipeline    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks deploy pipeline and application status for <applicationName> application in <secondStage> stage <pipelineName> pipeline    And User checks deployed <applicationName> application in the default namespace for <secondStage> stage in <pipelineName> pipeline    And User checks IMAGE_VERSION promoted image for <applicationName> application for <secondStage> stage <pipelineName> pipeline    And User deletes <pipelineName> application set    And User deletes <pipelineName>-<secondStage> cd pipeline stage resources    And User deletes <pipelineName>-<stageName> cd pipeline stage resources    And User deletes <pipelineName> cd pipeline resources    And User deletes "<applicationName>" codebase resources    And User checks default namespace for <stageName> stage in <pipelineName> pipeline is deleted    And User checks default namespace for <secondStage> stage in <pipelineName> pipeline is deleted    @TektonBitbucket @TektonBitbucketShortRegression @TektonBitbucketDeployRegression    Examples:      | applicationName  | codeLanguage           | pipelineName      | stageName | secondStage | newBranchName | newBranchVersion | autotestName         | autotestCodeLanguage  |      | dotnet31-aut-prm | dotnet_3_1_application | dotnet31-auto-prm | sit       | qa          | new           | 8.4.1-NEW        | java-8-grd-auto-test | java8_gradle_autotest |  Scenario Outline: Check auto-stable deploy with promotion    When User deletes <applicationName> Sonar project if present    When User deletes <secondApplicationName> Sonar project if present    Given User creates semver codebase on bitbucket      | applicationName | <applicationName> |      | codeLanguage    | <codeLanguage>    |      | startFrom       | <startFrom>       |    Given User creates semver codebase on bitbucket      | applicationName | <secondApplicationName> |      | codeLanguage    | <codeLanguage>          |      | startFrom       | <startFrom>             |    And User creates cd pipeline <pipelineName> with deployment type container      | applicationName       | <applicationName>       |      | secondApplicationName | <secondApplicationName> |      | branchName            | <defaultBranchName>     |      | promoteInPipeline     | True                    |    And User creates stage <stageName> in cd pipeline <pipelineName>      | applicationName | <applicationName>   |      | triggerType     | Auto-stable         |      | jobProvisioning | default             |      | source          | default             |      | qualityGateType | manual              |      | stepName        | manual              |      | triggerTemplate | deploy-with-approve |    And User triggers build pipeline type for <defaultBranchName> branch in <applicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<defaultBranchName>" branch in "<applicationName>" codebase    And User triggers build pipeline type for <defaultBranchName> branch in <applicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<defaultBranchName>" branch in "<applicationName>" codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User triggers build pipeline type for <defaultBranchName> branch in <secondApplicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<defaultBranchName>" branch in "<secondApplicationName>" codebase    When User saves the image version in memory as IMAGE_VERSION_2 for <secondApplicationName> application    And User Approve deploy of <stageName> on <pipelineName> pipeline    And User checks deploy-with-promote-approval pipeline and application status for <applicationName> application in <stageName> stage <pipelineName> pipeline    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks IMAGE_VERSION_2 promoted image for <secondApplicationName> application for <stageName> stage <pipelineName> pipeline    @TektonBitbucket @TektonBitbucketShortRegression @TektonBitbucketDeployRegression    Examples:      | applicationName   | secondApplicationName | codeLanguage               | defaultBranchName | startFrom      | pipelineName     | stageName |      | auto-stable-cppn1 | auto-stable-cppn2     | cpp_none_cmake_application | master            | 2.3.1-SNAPSHOT | auto-stable-cppn | sit       |  Scenario Outline: Check auto-stable deploy with promotion 2    When User deletes <applicationName> Sonar project if present    When User deletes <secondApplicationName> Sonar project if present    Given User creates semver codebase on bitbucket      | applicationName | <applicationName> |      | codeLanguage    | <codeLanguage>    |      | startFrom       | <startFrom>       |    Given User creates semver codebase on bitbucket      | applicationName | <secondApplicationName> |      | codeLanguage    | <codeLanguage>          |      | startFrom       | <startFrom>             |    And User creates cd pipeline <pipelineName> with deployment type container      | applicationName       | <applicationName>       |      | secondApplicationName | <secondApplicationName> |      | branchName            | <defaultBranchName>     |      | promoteInPipeline     | True                    |    And User creates stage <stageName> in cd pipeline <pipelineName>      | applicationName | <applicationName>   |      | triggerType     | Auto-stable         |      | jobProvisioning | default             |      | source          | default             |      | qualityGateType | manual              |      | stepName        | manual              |      | triggerTemplate | deploy-with-approve |    And User triggers build pipeline type for <defaultBranchName> branch in <applicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<defaultBranchName>" branch in "<applicationName>" codebase    And User triggers build pipeline type for <defaultBranchName> branch in <secondApplicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<defaultBranchName>" branch in "<secondApplicationName>" codebase    When User saves the image version in memory as IMAGE_VERSION for <secondApplicationName> application    And User Approve deploy of <stageName> on <pipelineName> pipeline    And User checks deploy-with-promote-approval pipeline and application status for <applicationName> application in <stageName> stage <pipelineName> pipeline    And User triggers build pipeline type for <defaultBranchName> branch in <secondApplicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<defaultBranchName>" branch in "<secondApplicationName>" codebase    When User saves the image version in memory as IMAGE_VERSION_2 for <secondApplicationName> application    And User Reject deploy of <stageName> on <pipelineName> pipeline    And User triggers build pipeline type for <defaultBranchName> branch in <applicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<defaultBranchName>" branch in "<applicationName>" codebase    When User saves the image version in memory as IMAGE_VERSION_3 for <applicationName> application    And User Approve deploy of <stageName> on <pipelineName> pipeline    And User checks deploy-with-promote-approval pipeline and application status for <applicationName> application in <stageName> stage <pipelineName> pipeline    And User checks IMAGE_VERSION_3 promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks IMAGE_VERSION promoted image for <secondApplicationName> application for <stageName> stage <pipelineName> pipeline    @TektonBitbucket @TektonBitbucketShortRegression @TektonBitbucketDeployRegression    Examples:      | applicationName    | secondApplicationName | codeLanguage           | defaultBranchName | startFrom      | pipelineName     | stageName |      | auto-stable-pyth-1 | auto-stable-pyth-2    | python_3_8_application | master            | 2.3.1-SNAPSHOT | auto-stable-pyth | sit       |  Scenario Outline: Check auto-stable deploy without promote    When User deletes <applicationName> Sonar project if present    When User deletes <secondApplicationName> Sonar project if present    Given User creates semver codebase on bitbucket      | applicationName | <applicationName> |      | codeLanguage    | <codeLanguage>    |      | startFrom       | <startFrom>       |    Given User creates semver codebase on bitbucket      | applicationName | <secondApplicationName> |      | codeLanguage    | <codeLanguage>          |      | startFrom       | <startFrom>             |    And User creates cd pipeline <pipelineName> with deployment type container      | applicationName       | <applicationName>       |      | secondApplicationName | <secondApplicationName> |      | branchName            | <defaultBranchName>     |      | promoteInPipeline     | True                    |    And User creates stage <stageName> in cd pipeline <pipelineName>      | applicationName | <applicationName>   |      | triggerType     | Auto-stable         |      | jobProvisioning | default             |      | source          | default             |      | qualityGateType | manual              |      | stepName        | manual              |      | triggerTemplate | deploy-with-approve |    And User triggers build pipeline type for <defaultBranchName> branch in <applicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    And User triggers build pipeline type for <defaultBranchName> branch in <secondApplicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<defaultBranchName>" branch in "<applicationName>" codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    Then User checks build pipeline status for "<defaultBranchName>" branch in "<secondApplicationName>" codebase    When User saves the image version in memory as IMAGE_VERSION_2 for <secondApplicationName> application    And User Approve deploy of <stageName> on <pipelineName> pipeline    And User checks deploy-with-promote-approval pipeline and application status for <applicationName> application in <stageName> stage <pipelineName> pipeline    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks IMAGE_VERSION_2 promoted image for <secondApplicationName> application for <stageName> stage <pipelineName> pipeline    And User triggers build pipeline type for <defaultBranchName> branch in <applicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<defaultBranchName>" branch in "<applicationName>" codebase    When User saves the image version in memory as IMAGE_VERSION_3 for <applicationName> application    And User <action> deploy of <stageName> on <pipelineName> pipeline    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks IMAGE_VERSION_2 promoted image for <secondApplicationName> application for <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION_3 image isn't promoted for <applicationName> application for <stageName> stage <pipelineName> pipeline    @TektonBitbucket @TektonBitbucketShortRegression @TektonBitbucketDeployRegression    Examples:      | applicationName    | secondApplicationName | codeLanguage           | defaultBranchName | startFrom      | action | pipelineName     | stageName |      | auto-stable-dn31-1 | auto-stable-dn31-2    | dotnet_3_1_application | master            | 2.3.1-SNAPSHOT | Reject | auto-stable-dn31 | sit       |  Scenario Outline: Check auto-stable deploy with queued(promote + promote) deploy    When User deletes <applicationName> Sonar project if present    When User deletes <secondApplicationName> Sonar project if present    Given User creates semver codebase on bitbucket      | applicationName | <applicationName> |      | codeLanguage    | <codeLanguage>    |      | startFrom       | <startFrom>       |    Given User creates semver codebase on bitbucket      | applicationName | <secondApplicationName> |      | codeLanguage    | <codeLanguage>          |      | startFrom       | <startFrom>             |    And User creates cd pipeline <pipelineName> with deployment type container      | applicationName       | <applicationName>       |      | secondApplicationName | <secondApplicationName> |      | branchName            | <defaultBranchName>     |      | promoteInPipeline     | True                    |    And User creates stage <stageName> in cd pipeline <pipelineName>      | applicationName | <applicationName>   |      | triggerType     | Auto-stable         |      | jobProvisioning | default             |      | source          | default             |      | qualityGateType | manual              |      | stepName        | manual              |      | triggerTemplate | deploy-with-approve |    And User triggers build pipeline type for <defaultBranchName> branch in <applicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<defaultBranchName>" branch in "<applicationName>" codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User triggers build pipeline type for <defaultBranchName> branch in <secondApplicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<defaultBranchName>" branch in "<secondApplicationName>" codebase    When User saves the image version in memory as IMAGE_VERSION_2 for <secondApplicationName> application    And User triggers build pipeline type for <defaultBranchName> branch in <applicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<defaultBranchName>" branch in "<applicationName>" codebase    When User saves the image version in memory as IMAGE_VERSION_3 for <applicationName> application    Then User checks CDStageDeploy for "<secondApplicationName>" application with IMAGE_VERSION_2 image in <pipelineName> pipeline <stageName> env is in running status    Then User checks CDStageDeploy for "<applicationName>" application with IMAGE_VERSION_3 image in <pipelineName> pipeline <stageName> env is in in-queue status    And User Approve deploy of <stageName> on <pipelineName> pipeline    And User checks deploy-with-promote-approval pipeline and application status for <applicationName> application in <stageName> stage <pipelineName> pipeline    And User checks IMAGE_VERSION promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks IMAGE_VERSION_2 promoted image for <secondApplicationName> application for <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION_3 image isn't promoted for <applicationName> application for <stageName> stage <pipelineName> pipeline    Then User checks CDStageDeploy for "<applicationName>" application with IMAGE_VERSION_3 image in <pipelineName> pipeline <stageName> env is in running status    And User Approve deploy of <stageName> on <pipelineName> pipeline    And User checks deploy-with-promote-approval pipeline and application status for <applicationName> application in <stageName> stage <pipelineName> pipeline    And User checks IMAGE_VERSION_3 promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks IMAGE_VERSION_2 promoted image for <secondApplicationName> application for <stageName> stage <pipelineName> pipeline    @TektonBitbucket @TektonBitbucketShortRegression @TektonBitbucketDeployRegression    Examples:      | applicationName   | secondApplicationName | codeLanguage              | defaultBranchName | startFrom      | pipelineName    | stageName |      | auto-stable-j21-1 | auto-stable-j21-2     | java21_gradle_application | master            | 2.3.1-SNAPSHOT | auto-stable-j21 | sit       |  Scenario Outline: Check auto-stable deploy with queued(no promote + promote) deploy    When User deletes <applicationName> Sonar project if present    When User deletes <secondApplicationName> Sonar project if present    Given User creates semver codebase on bitbucket      | applicationName | <applicationName> |      | codeLanguage    | <codeLanguage>    |      | startFrom       | <startFrom>       |    Given User creates semver codebase on bitbucket      | applicationName | <secondApplicationName> |      | codeLanguage    | <codeLanguage>          |      | startFrom       | <startFrom>             |    And User creates cd pipeline <pipelineName> with deployment type container      | applicationName       | <applicationName>       |      | secondApplicationName | <secondApplicationName> |      | branchName            | <defaultBranchName>     |      | promoteInPipeline     | True                    |    And User creates stage <stageName> in cd pipeline <pipelineName>      | applicationName | <applicationName>   |      | triggerType     | Auto-stable         |      | jobProvisioning | default             |      | source          | default             |      | qualityGateType | manual              |      | stepName        | manual              |      | triggerTemplate | deploy-with-approve |    And User triggers build pipeline type for <defaultBranchName> branch in <applicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<defaultBranchName>" branch in "<applicationName>" codebase    When User saves the image version in memory as IMAGE_VERSION for <applicationName> application    And User triggers build pipeline type for <defaultBranchName> branch in <secondApplicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<defaultBranchName>" branch in "<secondApplicationName>" codebase    When User saves the image version in memory as IMAGE_VERSION_2 for <secondApplicationName> application    And User triggers build pipeline type for <defaultBranchName> branch in <applicationName> codebase      | codeLanguage   | <codeLanguage> |      | versioningType | semver         |    Then User checks build pipeline status for "<defaultBranchName>" branch in "<applicationName>" codebase    When User saves the image version in memory as IMAGE_VERSION_3 for <applicationName> application    Then User checks CDStageDeploy for "<secondApplicationName>" application with IMAGE_VERSION_2 image in <pipelineName> pipeline <stageName> env is in running status    Then User checks CDStageDeploy for "<applicationName>" application with IMAGE_VERSION_3 image in <pipelineName> pipeline <stageName> env is in in-queue status    And User Reject deploy of <stageName> on <pipelineName> pipeline    And User checks that IMAGE_VERSION image isn't promoted for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION_2 image isn't promoted for <secondApplicationName> application for <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION_3 image isn't promoted for <applicationName> application for <stageName> stage <pipelineName> pipeline    And Wait for 10 seconds    Then User checks CDStageDeploy for "<applicationName>" application with IMAGE_VERSION_3 image in <pipelineName> pipeline <stageName> env is in running status    And User Approve deploy of <stageName> on <pipelineName> pipeline    And User checks deploy-with-promote-approval pipeline and application status for <applicationName> application in <stageName> stage <pipelineName> pipeline    And User checks that IMAGE_VERSION image isn't promoted for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks IMAGE_VERSION_3 promoted image for <applicationName> application for <stageName> stage <pipelineName> pipeline    And User checks IMAGE_VERSION_2 promoted image for <secondApplicationName> application for <stageName> stage <pipelineName> pipeline    @TektonBitbucket @TektonBitbucketShortRegression @TektonBitbucketDeployRegression    Examples:      | applicationName  | secondApplicationName | codeLanguage      | defaultBranchName | startFrom      | pipelineName   | stageName |      | auto-stable-js-1 | auto-stable-js-2      | react_application | master            | 2.3.1-SNAPSHOT | auto-stable-js | sit       |